// BgpSim: BGP Network Simulator written in Rust
// Copyright 2022-2024 Tibor Schneider <sctibor@ethz.ch>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Module containing the definitions for the event queues.

use crate::{
    ospf::OspfProcess,
    types::{NetworkDevice, PhysicalNetwork, Prefix, RouterId},
};

use ordered_float::NotNan;
use serde::{Deserialize, Serialize};
use std::collections::{HashMap, VecDeque};

use super::Event;

/// Interface of an event queue.
pub trait EventQueue<P: Prefix> {
    /// Type of the priority.
    type Priority: Default + FmtPriority + Clone;

    /// Enqueue multiple events into the event queue. This function is called *once* with the list
    /// of all events that are generated by one router reacting to a single event.
    fn push<Ospf: OspfProcess>(
        &mut self,
        events: Vec<Event<P, Self::Priority>>,
        routers: &HashMap<RouterId, NetworkDevice<P, Ospf>>,
        net: &PhysicalNetwork,
    );

    /// pop the next event
    fn pop(&mut self) -> Option<Event<P, Self::Priority>>;

    /// peek the next event
    fn peek(&self) -> Option<&Event<P, Self::Priority>>;

    /// Get the number of enqueued events
    fn len(&self) -> usize;

    /// Return `True` if no event is enqueued.
    fn is_empty(&self) -> bool;

    /// Remove all events from the queue.
    fn clear(&mut self);

    /// Update the model parameters. This function will always be called after some externally
    /// triggered event occurs. It will still happen, even if the network was set to manual
    /// simulation.
    fn update_params<Ospf: OspfProcess>(
        &mut self,
        routers: &HashMap<RouterId, NetworkDevice<P, Ospf>>,
        net: &PhysicalNetwork,
    );

    /// Get the current time of the queue.
    fn get_time(&self) -> Option<f64>;

    /// Clone all events from self into conquered.
    ///
    /// # Safety
    /// The caller must ensure that all parameters of `self` and `conquered` are the same.
    unsafe fn clone_events(&self, conquered: Self) -> Self;
}

/// Basic event queue
#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
#[serde(bound(deserialize = "P: for<'a> serde::Deserialize<'a>"))]
pub struct BasicEventQueue<P: Prefix>(pub(crate) VecDeque<Event<P, ()>>);

impl<P: Prefix> Default for BasicEventQueue<P> {
    fn default() -> Self {
        Self(Default::default())
    }
}

impl<P: Prefix> BasicEventQueue<P> {
    /// Create a new empty event queue
    pub fn new() -> Self {
        Self(VecDeque::new())
    }
}

impl<P: Prefix> EventQueue<P> for BasicEventQueue<P> {
    type Priority = ();

    fn push<Ospf: OspfProcess>(
        &mut self,
        events: Vec<Event<P, Self::Priority>>,
        _: &HashMap<RouterId, NetworkDevice<P, Ospf>>,
        _: &PhysicalNetwork,
    ) {
        for event in events {
            self.0.push_back(event)
        }
    }

    fn pop(&mut self) -> Option<Event<P, Self::Priority>> {
        self.0.pop_front()
    }

    fn peek(&self) -> Option<&Event<P, Self::Priority>> {
        self.0.front()
    }

    fn len(&self) -> usize {
        self.0.len()
    }

    fn is_empty(&self) -> bool {
        self.0.is_empty()
    }

    fn clear(&mut self) {
        self.0.clear()
    }

    fn get_time(&self) -> Option<f64> {
        None
    }

    fn update_params<Ospf: OspfProcess>(
        &mut self,
        _: &HashMap<RouterId, NetworkDevice<P, Ospf>>,
        _: &PhysicalNetwork,
    ) {
    }

    unsafe fn clone_events(&self, _: Self) -> Self {
        self.clone()
    }
}

/// Display type for Priority
pub trait FmtPriority {
    /// Display the priority
    fn fmt(&self) -> String;
}

impl FmtPriority for f64 {
    fn fmt(&self) -> String {
        format!("(time: {self})")
    }
}

impl FmtPriority for NotNan<f64> {
    fn fmt(&self) -> String {
        format!("(time: {})", self.into_inner())
    }
}

impl FmtPriority for usize {
    fn fmt(&self) -> String {
        format!("(priority: {self})")
    }
}

impl FmtPriority for () {
    fn fmt(&self) -> String {
        String::new()
    }
}
